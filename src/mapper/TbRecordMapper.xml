<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mapper.TbRecordMapper">
    <resultMap id="BaseResultMap" type="po.TbRecord">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="book_id" property="bookId" jdbcType="INTEGER"/>
        <result column="recordDate" property="recorddate" jdbcType="BIGINT"/>
        <result column="backDate" property="backdate" jdbcType="BIGINT"/>
        <result column="returnbook" property="returnbook" jdbcType="INTEGER"/>
        <result column="ticketFfee" property="ticketffee" jdbcType="REAL"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, user_id, book_id, recordDate, backDate, returnbook, ticketFfee
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="po.TbRecordExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from tb_record
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from tb_record
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="po.TbRecordExample">
        delete from tb_record
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="po.TbRecord">
    insert into tb_record (id, user_id, book_id, 
      recordDate, backDate, returnbook, 
      ticketFfee)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{bookId,jdbcType=INTEGER}, 
      #{recorddate,jdbcType=BIGINT}, #{backdate,jdbcType=BIGINT}, #{returnbook,jdbcType=INTEGER}, 
      #{ticketffee,jdbcType=REAL})
  </insert>
    <insert id="insertSelective" parameterType="po.TbRecord">
        insert into tb_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="bookId != null">
                book_id,
            </if>
            <if test="recorddate != null">
                recordDate,
            </if>
            <if test="backdate != null">
                backDate,
            </if>
            <if test="returnbook != null">
                returnbook,
            </if>
            <if test="ticketffee != null">
                ticketFfee,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="bookId != null">
                #{bookId,jdbcType=INTEGER},
            </if>
            <if test="recorddate != null">
                #{recorddate,jdbcType=BIGINT},
            </if>
            <if test="backdate != null">
                #{backdate,jdbcType=BIGINT},
            </if>
            <if test="returnbook != null">
                #{returnbook,jdbcType=INTEGER},
            </if>
            <if test="ticketffee != null">
                #{ticketffee,jdbcType=REAL},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="po.TbRecordExample" resultType="java.lang.Integer">
        select count(*) from tb_record
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update tb_record
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.bookId != null">
                book_id = #{record.bookId,jdbcType=INTEGER},
            </if>
            <if test="record.recorddate != null">
                recordDate = #{record.recorddate,jdbcType=BIGINT},
            </if>
            <if test="record.backdate != null">
                backDate = #{record.backdate,jdbcType=BIGINT},
            </if>
            <if test="record.returnbook != null">
                returnbook = #{record.returnbook,jdbcType=INTEGER},
            </if>
            <if test="record.ticketffee != null">
                ticketFfee = #{record.ticketffee,jdbcType=REAL},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update tb_record
        set id = #{record.id,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=INTEGER},
        book_id = #{record.bookId,jdbcType=INTEGER},
        recordDate = #{record.recorddate,jdbcType=BIGINT},
        backDate = #{record.backdate,jdbcType=BIGINT},
        returnbook = #{record.returnbook,jdbcType=INTEGER},
        ticketFfee = #{record.ticketffee,jdbcType=REAL}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="po.TbRecord">
        update tb_record
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="bookId != null">
                book_id = #{bookId,jdbcType=INTEGER},
            </if>
            <if test="recorddate != null">
                recordDate = #{recorddate,jdbcType=BIGINT},
            </if>
            <if test="backdate != null">
                backDate = #{backdate,jdbcType=BIGINT},
            </if>
            <if test="returnbook != null">
                returnbook = #{returnbook,jdbcType=INTEGER},
            </if>
            <if test="ticketffee != null">
                ticketFfee = #{ticketffee,jdbcType=REAL},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="po.TbRecord">
    update tb_record
    set user_id = #{userId,jdbcType=INTEGER},
      book_id = #{bookId,jdbcType=INTEGER},
      recordDate = #{recorddate,jdbcType=BIGINT},
      backDate = #{backdate,jdbcType=BIGINT},
      returnbook = #{returnbook,jdbcType=INTEGER},
      ticketFfee = #{ticketffee,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>